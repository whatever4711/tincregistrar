#!/usr/bin/env bash


#CONFIG_SERVER="192.168.200.49:8000"
CONFIG_SERVER="172.19.0.2:8000"

EXPECTED_NODES=2
POLL_TIMEOUT=300
#INTERFACE="eth0"

TINC_NETWORKNAME="demo"
TINC_KEYLENGTH="1024"
TINC_INTERFACE="tun0"

#######################
# generated parameter #
#######################
HOSTNAME=${HOSTNAME//[\-\_\.\s]/}
TINC_PATH="/etc/tinc"
NODE_HOST_FILES="${TINC_PATH}/${TINC_NETWORKNAME}/hosts"
NODE_CONFIG_FILE="${TINC_PATH}/${TINC_NETWORKNAME}/tinc.conf"

#######################

function get_ip_of_interface(){
  local interface="${1}"
  local all_ip_addresses=$(hostname -I)
  local interface_ip=$(ip a s "$interface" 2>/dev/null)
  for ip_address in $all_ip_addresses; do
    if [[ "$interface_ip" == *"$ip_address"* ]]; then
      echo "$ip_address"
    fi
  done
}

function evaluate_result(){
  local returnvalue="${1}"
  local message="${2}"
  if [ "$returnvalue" -eq 0 ]; then
    echo -e "\e[32m  [PASS] ${message}\e[0m"
  else
    echo -e "\e[31m  [FAIL] ${message}\e[0m"
  fi
}

function enable_autostart(){
  if [[ ($(grep -c "${TINC_NETWORKNAME}" "${TINC_PATH}/nets.boot") -eq 0) ]]; then
    echo "${TINC_NETWORKNAME}" >> "${TINC_PATH}/nets.boot"
  fi
}

function disable_autostart(){
  if [[ $(grep -c "${TINC_NETWORKNAME}" "${TINC_PATH}/nets.boot") -gt 0 ]]; then
    sed -i '' "s/${TINC_NETWORKNAME}\n//g" > ${TINC_PATH}/nets.boot
  fi
}

function prepare_tinc_config(){
mkdir -p "${NODE_HOST_FILES}/"

cat << EOM > "${TINC_PATH}/${TINC_NETWORKNAME}/tinc-up"
#!/bin/sh
IP="\$(grep Subnet "${NODE_HOST_FILES}/${HOSTNAME}" |cut -d' ' -f3 | cut -d'/' -f1)"
ifconfig "\${INTERFACE}" "\${IP}" netmask 255.255.255.0
EOM
chmod a+x "${TINC_PATH}/${TINC_NETWORKNAME}/tinc-up"

cat << EOM > "${TINC_PATH}/${TINC_NETWORKNAME}/tinc-down"
#!/bin/sh
ifconfig "\${INTERFACE}" down
EOM
chmod a+x "${TINC_PATH}/${TINC_NETWORKNAME}/tinc-down"
}

function create_tinc_config(){
cat << EOM > "${NODE_CONFIG_FILE}"
Name = ${HOSTNAME}
AddressFamily = ipv4
Interface = ${TINC_INTERFACE}
EOM

if [[ -z "${INTERFACE}" ]]; then
  IP="$(get_ip_of_interface ${INTERFACE})"
  echo -e "# Hostname = ${HOSTNAME}\nAddress = ${IP}" > "${NODE_HOST_FILES}/${HOSTNAME}"
else
  echo -e "# Hostname = ${HOSTNAME}" > "${NODE_HOST_FILES}/${HOSTNAME}"
fi
tincd -n ${TINC_NETWORKNAME} -K${TINC_KEYLENGTH}
}

function publish_config(){
  #send own config
  temp=$(curl --silent -X POST -T "${NODE_HOST_FILES}/${HOSTNAME}" "${CONFIG_SERVER}/regService/config")
  echo -e "$temp" > "${NODE_HOST_FILES}/${HOSTNAME}"
}

function get_configs(){
  local ALL_CONFIGS="$(curl --silent "${CONFIG_SERVER}/regService/config")"

  local regex="#\sHostname\s=\s([A-Za-z0-9]*)"
  local OLD_IFS="$IFS"
  IFS="%"
  local CONFIG_ARRAY=( $ALL_CONFIGS )
  for ONE_CONFIG in "${CONFIG_ARRAY[@]}"
  do
    [[ "$ONE_CONFIG" =~ ${regex} ]]
    local NODE_NAME=${BASH_REMATCH[1]}

    if [[ ! -f "${NODE_HOST_FILES}/$NODE_NAME" ]]; then
      echo $ONE_CONFIG > "${NODE_HOST_FILES}/$NODE_NAME"
    fi

    if [[ "$HOSTNAME" != "$NODE_NAME" ]]; then
      if [[ ($(grep -c "ConnectTo = $NODE_NAME" "${NODE_CONFIG_FILE}") -eq 0) ]]; then
        echo "ConnectTo = $NODE_NAME" >> "${NODE_CONFIG_FILE}"
      fi
    fi
  done
  IFS="$OLD_IFS"
}

function poll_configs(){
  while true; do
    get_configs
    if [[ $(ls "${NODE_HOST_FILES}/" | wc -w) -eq $EXPECTED_NODES ]]; then
      return 0
    fi
    sleep 5
  done
}

function delete_config(){
  curl --silent -X DELETE "${CONFIG_SERVER}/regService/config"
}


function test(){
  for ONE_FILE in ; do
    local NODE_NAME="$(basename "${ONE_FILE}")"
    local NODE_IP="$(grep Subnet "${ONE_FILE}" |cut -d' ' -f3 | cut -d'/' -f1)"
    ping -W 1 -c 2 ${NODE_IP} > /dev/null 2>&1
    evaluate_result $? "  ${NODE_NAME} is pingable with IP ${NODE_IP}"
  done
}

function create(){
  echo "prepare"
  prepare_tinc_config
  echo "configure"
  create_tinc_config
  echo "publishconfig"
  publish_config
  echo "get all configs"
  timeout ${POLL_TIMEOUT} "$(poll_configs)"
}

function remove(){
  echo "remove network ${TINC_NETWORKNAME}"
  rm -rf "${TINC_PATH}/${TINC_NETWORKNAME}"
  delete_config
}

function start(){
  echo "enable"
  enable_autostart
  systemctl start tinc.service
}

function stop(){
  systemctl stop tinc.service
  echo "disable"
  disable_autostart
}

usage () {
cat << EOM
usage:

  tincsetup start           Start Tinc

  tincsetup stop            Stop Tinc.

  tincsetup create          Create new tinc configuration.

  tincsetup remove          Remove tinc configuration.

  tincsetup pullconfig      Get all configs from tincregistrator.

  tincsetup test            Ping all existing nodes.

EOM
}

if [[ $DEBUG == "true" ]]; then
  eval "$@"
elif [ $# -eq 1 ]; then
  CL_ARGUMENT="${1}"
  case "$1" in
    "start" )
      start
      ;;
    "stop" )
      stop
      ;;
    "create" )
      create
      ;;
    "remove" )
      remove
      ;;
    "pullconfig" )
      get_configs
      ;;
    * )
      usage
      ;;
  esac
else
  usage
fi
